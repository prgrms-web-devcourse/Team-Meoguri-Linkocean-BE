plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.meoguri'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

checkstyle {
    maxWarnings = 0 // 규칙이 어긋나는 코드가 하나라도 있을 경우 빌드 fail을 내고 싶다면 이 선언을 추가한다.
    configFile = file("${rootDir}/checkstyle/naver-checkstyle-rules.xml")
    toolVersion = "10.2"  // checkstyle 버전 8.24 이상 선언
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    reports {
        html.enabled(true)
        xml.enabled(false)
        csv.enabled(false)
    }

    finalizedBy 'jacocoTestCoverageVerification'

    dependsOn test

    def Qdomains = []
    for (qPattern in "QA".."QZ") {  // qPattern = "*.QA","*.QB","*.QC", ... "*.QZ"
        Qdomains.add("com/meoguri/**/" + qPattern + "*.*")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/meoguri/**/*Request.*",
                    "com/meoguri/**/*Response.*",
                    "com/meoguri/**/*Command.*",
                    "com/meoguri/**/*Result.*",
                    "com/meoguri/**/*Cond.*",
                    "com/meoguri/**/*Properties.*",
                    "com/meoguri/**/SearchTab.*",
                    "com/meoguri/**/*Noti.*",
            ] + Qdomains)
        }))
    }
}

jacocoTestCoverageVerification {

    violationRules {
        rule {
            enabled = false
            element = 'BUNDLE'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            excludes = []
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.jsoup:jsoup:1.14.3'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.239'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.github.maricn:logback-slack-appender:1.4.0'

    // Database
    implementation 'mysql:mysql-connector-java'
    implementation 'org.flywaydb:flyway-mysql'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // Query DSL
    implementation "com.querydsl:querydsl-jpa"

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'


    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // QueryDSL
    // JPAAnnotationProcessor 사용 지정
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"

    // 프로퍼티 주입을 위해 사용
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation 'com.h2database:h2'
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.0'
    testImplementation 'com.tngtech.archunit:archunit:0.23.1'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit' // excluding junit 4
    }
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3'

}

tasks.named('test') {
    useJUnitPlatform()

    finalizedBy 'jacocoTestReport'
}

task copyDev(type: Copy) {
    from './config'
    into './src/main/resources'
}

build {
    dependsOn copyDev
}
