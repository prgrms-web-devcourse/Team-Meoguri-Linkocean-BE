name: Prod CI/CD

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  Prod-CI-CD:
    runs-on: ubuntu-latest
    steps:
      ## checkout github repo
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.SUBMODULE_ACCESS_TOKEN }}
          submodules: true

      ## jdk setting
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      ## start docker container for test
      - name: build docker-compose
        run: docker-compose up -d

      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## gradle build
      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean build

      ## codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./build/reports/jacoco/test/jacocoTestReport.xml

      ## docker build & push to dockerhub
      - name: Docker build & push to dockerhub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile.prod -t ${{ secrets.DOCKER_REPO }}/linkocean_prod .
          docker push ${{ secrets.DOCKER_REPO }}/linkocean_prod

      ## deploy to ec2
      - name: Deploy to ec2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_EC2_ENDPOINT }}
          username: ${{ secrets.PROD_EC2_USERNAME }}
          password: ${{ secrets.PROD_EC2_PASSWORD }}
          port: 22
          script: |
            docker image prune -f
            sudo docker rm -f linkocean-spring
            sudo docker pull ${{ secrets.DOCKER_REPO }}/linkocean_prod
            sudo docker run -d -p 8080:8080 --name linkocean-spring ${{ secrets.DOCKER_REPO }}/linkocean_prod

  ## slack notification
  action-slack:
    needs: Prod-CI-CD
    runs-on: ubuntu-latest
    steps:
      - name: Slack Alarm
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: GitHub-Actions CI/CD
          fields: repo,message,commit,author,ref,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.